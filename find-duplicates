#!/usr/bin/python3
# Copyright Douglas Bagnall <douglas@halo.gen.nz> 2021  (MIT license)

import sys
import subprocess
import os
from gmpy2 import bit_mask, hamdist, pack
from itertools import combinations
import time

C_NORMAL = "\033[00m"
RED = "\033[01;31m"
GREEN = "\033[01;32m"
DARK_YELLOW = "\033[00;33m"
CYAN = "\033[01;36m"

RADIUS = 50


def fpcalc(filename):
    cmd = ["fpcalc", "-raw", filename]
    p = subprocess.run(cmd, capture_output=True)
    if p.returncode != 0:
        print(f"\n{RED} ERROR {p.returncode} {C_NORMAL} "
              f"{filename} is not audio")
        return [0], 0
    duration, fingerprint = p.stdout.split(b"\n", 1)
    d = int(duration[9:])
    fp = [int(x) for x in fingerprint[12:].split(b",")]
    return fp, d


def search(needle, haystack):
    k = len(needle)
    n = len(haystack)
    best = 33 * k
    mask = bit_mask(len(needle) * 32)
    needle = pack(needle, 32)
    haystack = pack(haystack, 32)
    for i in range(n - k):
        h = (haystack >> (i * 32)) & mask
        c = hamdist(needle, h)
        if c < best:
            best = c

    return best


def compare(a, b):
    if len(a) > len(b):
        b, a = a, b

    if len(a) < RADIUS * 2 + 1:
        # this is not long enough
        return 0.0

    centre = len(a) // 2
    needle = a[centre - RADIUS : centre + RADIUS]
    haystack = b
    score = search(needle, haystack)

    return 1.0 - score / (len(needle) * 16.0)


def main():
    filenames = []
    for root in sys.argv[1:]:
        for (d, subdirs, files) in os.walk(root):
            for fn in files:
                filenames.append(os.path.join(d, fn))

    n = len(filenames)
    print(f"fingerprinting {n} files")
    t1 = time.time()
    fingerprints = []
    for i, fn in enumerate(filenames):
        fp, duration = fpcalc(fn)
        if duration == 0:
            continue
        fingerprints.append((fn, fp, duration))
        if i % 10 == 9:
            if i % 100 == 99:
                sys.stdout.write(f"{GREEN}{i+1}{C_NORMAL}\n")
            else:
                sys.stdout.write(f"{GREEN}:{C_NORMAL}")
        else:
            sys.stdout.write('.')
        sys.stdout.flush()

    t2 = time.time()
    n_pairs = ((n * n) - n) // 2
    print(f"fingerprinting took {(t2 -t1):.2f} seconds")
    print(f"comparing {n_pairs} pairs")
    clusters = {}
    progress = min(max(n_pairs // 10, 1000), 10000)
    i = 0
    for a, b in combinations(fingerprints, 2):
        i += 1
        if i % progress == 0:
            percent = int(i * 100.0 / n_pairs + 0.5)
            print(f"{CYAN}{i} / {n_pairs} ({percent}%){C_NORMAL}\n")

        if abs(a[2] - b[2]) > 60:
            continue

        score = compare(a[1], b[1])
        if score > 0.55:
            if score > 0.75:
                c = GREEN
            else:
                c = DARK_YELLOW
            print(f"{a[0]}\n{b[0]}\n{c}{score}{C_NORMAL}\n")
            _a = a[0]
            _b = b[0]
            cluster = {_a, _b}
            if _a in clusters:
                cluster |= clusters[_a]
            if _b in clusters:
                cluster |= clusters[_b]

            for k in cluster:
                clusters[k] = cluster

        elif score > 0.35:
            print(f"{a[0]}\n{b[0]}\n{RED}{score}{C_NORMAL}\n")

    t3 = time.time()
    print(f"comparisons took {(t3 -t2):.2f} seconds")

    f = open('dupe-report.txt', 'a')
    print('Looking at:', file=f)
    for root in sys.argv[1:]:
        print(f'   {root}', file=f)

    # There will be duplicate clusters
    cv = set(tuple(sorted(x)) for x in clusters.values())

    for c in sorted(cv):
        n = len(c)
        colour = CYAN if n == 2 else DARK_YELLOW
        print()
        print(f'{colour}--- {n} duplicates ---{C_NORMAL}')
        for fn in c:
            print(fn)

        print(f'\n{n} duplicates', file=f)
        for fn in c:
            print(fn, file=f)


main()
