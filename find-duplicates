#!/usr/bin/python3
# Copyright Douglas Bagnall <douglas@halo.gen.nz> 2021  (MIT license)

import sys
import subprocess
import os
from gmpy2 import bit_mask, hamdist, pack
from itertools import combinations
import time
import argparse


C_NORMAL = "\033[00m"
RED = "\033[01;31m"
GREEN = "\033[01;32m"
DARK_YELLOW = "\033[00;33m"
CYAN = "\033[01;36m"

# radius 4 is about a 1 second window
RADIUS1 = 10
RADIUS2 = 100
VERBOSE = False


def switch_colour_off():
    global C_NORMAL, RED, GREEN, DARK_YELLOW, CYAN
    C_NORMAL = RED = GREEN = DARK_YELLOW = CYAN = ''


def debug(*args, **kwargs):
    if VERBOSE:
        print(*args, **kwargs)


def fpcalc(filename):
    cmd = ["fpcalc", "-raw", '-algorithm', '4', filename]
    p = subprocess.run(cmd, capture_output=True)
    if p.returncode != 0:
        debug(f"\n{RED} ERROR {p.returncode} {C_NORMAL} "
              f"{filename} is not audio")
        return [p.returncode], 0
    duration, fingerprint = p.stdout.split(b"\n", 1)
    d = int(duration[9:])
    fp = [int(x) for x in fingerprint[12:].split(b",")]
    return fp, d


def search(needle, haystack):
    k = len(needle)
    n = len(haystack)
    best = 33 * k
    mask = bit_mask(len(needle) * 32)
    needle = pack(needle, 32)
    haystack = pack(haystack, 32)
    for i in range(n - k):
        h = (haystack >> (i * 32)) & mask
        c = hamdist(needle, h)
        if c < best:
            best = c

    return best


def compare(a, b):
    if len(a) > len(b):
        b, a = a, b

    if len(a) < RADIUS2 * 2 + 1:
        # this is not long enough
        return 0.0

    centre = len(a) // 2
    haystack = b

    # First scan with a small window. If we don't find a match here,
    # we won't with the large window either.
    needle1 = a[centre - RADIUS1 : centre + RADIUS1]
    score = search(needle1, haystack)
    if score > len(needle1) * 8:
        return 0.0

    debug(f"possible match: {score} / {len(needle1) * 32}")

    # If we got here, the small window is a good match
    needle2 = a[centre - RADIUS2 : centre + RADIUS2]
    score = search(needle2, haystack)

    return 1.0 - score / (len(needle2) * 16.0)


def process_files(filenames):
    print(f"fingerprinting {len(filenames)} files")
    t1 = time.time()
    fingerprints = []
    for i, fn in enumerate(filenames):
        fp, duration = fpcalc(fn)
        if duration == 0:
            sys.stdout.write(f'{RED}{fp[0]}{C_NORMAL}')
            continue
        fingerprints.append((fn, fp, duration))
        if i % 10 == 9:
            if i % 100 == 99:
                sys.stdout.write(f"{GREEN}{i+1}{C_NORMAL}\n")
            else:
                sys.stdout.write(f"{GREEN}:{C_NORMAL}")
        else:
            sys.stdout.write('.')
        sys.stdout.flush()

    t2 = time.time()
    print(f"fingerprinting took {(t2 -t1):.2f} seconds")

    n = len(fingerprints)
    n_pairs = ((n * n) - n) // 2

    print(f"comparing {n_pairs} pairs")
    clusters = {}
    progress = min(max(n_pairs // 10, 1000), 10000)
    i = 0
    for a, b in combinations(fingerprints, 2):
        i += 1
        if i % progress == 0:
            percent = int(i * 100.0 / n_pairs + 0.5)
            print(f"{CYAN}{i} / {n_pairs} ({percent}%){C_NORMAL}\n")

        if abs(a[2] - b[2]) > 60:
            continue

        score = compare(a[1], b[1])
        if score > 0.55:
            if score > 0.75:
                c = GREEN
            else:
                c = DARK_YELLOW
            print(f"{a[0]}\n{b[0]}\n{c}{score}{C_NORMAL}\n")
            _a = a[0]
            _b = b[0]
            cluster = {_a, _b}
            if _a in clusters:
                cluster |= clusters[_a]
            if _b in clusters:
                cluster |= clusters[_b]

            for k in cluster:
                clusters[k] = cluster

        elif VERBOSE and score > 0.35:
            print(f"{a[0]}\n{b[0]}\n{RED}{score}{C_NORMAL}\n")

    t3 = time.time()
    print(f"comparisons took {(t3 -t2):.2f} seconds\n")

    # There will be duplicates in clusters.values() -- if there are
    # clusters at all -- so we filter as a set of tuples.
    return sorted(set(tuple(sorted(x)) for x in clusters.values()))


def report(clusters, f, dirs):
    if f == sys.stdout:
        cyan = CYAN
        brown = DARK_YELLOW
        normal = C_NORMAL
    else:
        cyan, brown, normal = '', '', ''

    if len(clusters) == 1:
        print('found one cluster in: ', file=f)
    elif clusters:
        print(f'found {len(clusters)} clusters in: ', file=f)
    else:
        print('found no clusters in: ', file=f)

    for root in dirs:
        print(f'   {root}', file=f)

    for c in clusters:
        n = len(c)
        colour = cyan if n == 2 else brown
        print(f'\n{colour}--- {n} duplicates ---{normal}', file=f)
        for fn in c:
            s = os.stat(fn)
            t = time.localtime(s.st_mtime)
            mtime = time.strftime("%Y-%m-%d %H:%M", t)
            print(f"{mtime} {s.st_size:8}  {fn}",
                  file=f)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('DIR', nargs="+",
                        help="search these directories")
    parser.add_argument('-v', '--verbose', action="store_true",
                        default=False,
                        help='print more')
    parser.add_argument('-o', '--report-file',
                        help='write findings to this file')
    parser.add_argument('--colour', '--color',
                        choices=['yes', 'no', 'auto'],
                        default='auto',
                        help=('whether to colour output '
                              '(default: in a terminal only)'))

    args = parser.parse_args()

    global VERBOSE
    VERBOSE = args.verbose

    if (args.colour == 'no' or
        (args.colour == 'auto' and not sys.stdout.isatty())):
        switch_colour_off()

    filenames = []
    for root in args.DIR:
        for (d, subdirs, files) in os.walk(root):
            for fn in files:
                filenames.append(os.path.join(d, fn))

    filenames = sorted(set(filenames))

    clusters = process_files(filenames)

    report(clusters, sys.stdout, args.DIR)

    if args.report_file is not None:
        with open(args.report_file, 'w') as f:
            report(clusters, f, args.DIR)


main()
